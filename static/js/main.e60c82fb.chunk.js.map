{"version":3,"sources":["comps/nav/Nav.js","comps/searchbox/SearchBox.js","comps/default/Default.js","comps/card/Card.js","App.js","serviceWorker.js","index.js"],"names":["Nav","react_default","a","createElement","className","SearchBox","_ref","query","onSearchChange","onBtnSubmit","onSubmit","type","name","placeholder","autoFocus","onChange","value","version","id","xmlns","x","y","viewBox","d","Default","Card","src","alt","App","process","GBOOKS_API_KEY","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","api_url","isLoaded","handleSearchChange","bind","assertThisInitialized","handleSubmit","setState","event","target","preventDefault","_this$state","parsedQuery","replace","elements","searchfield","length","console","log","concat","fetch","then","resp","json","json_data","table","nav_Nav","searchbox_SearchBox","default_Default","card_Card","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e60c82fb.chunk.js","sourcesContent":["import React from 'react';\n\nconst Nav = () => {\n  return (\n    <nav className=\"Nav\">\n      {/* <ul>\n        <li>Item 1</li>\n        <li>Item 2</li>\n        <li>Item 3</li>\n      </ul> */}\n    </nav>\n  );\n}\n\nexport default Nav;\n","import React from 'react';\n// import lupita from './magnifying-glass-browser.svg';\n\nconst SearchBox = ({ query, onSearchChange, onBtnSubmit }) => {\n  return (\n    <form className=\"SearchBox\" onSubmit={onBtnSubmit}>\n      <input\n        className=\"input\"\n        type=\"search\"\n        name=\"searchfield\"\n        placeholder=\"title, author...\"\n        autoFocus={true}\n        onChange={onSearchChange}\n        value={query}\n      />\n      <button type='submit' className='search-btn' name=\"search-btn\">\n        <svg version=\"1.1\" id=\"lupita-svg\" xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\" viewBox=\"0 0 500 500\"\n        >\n          <g>\n            <g>\n              <path className=\"lupita-path\" d=\"M332.74,315.35c30.883-33.433,50.15-78.2,50.15-127.5C382.89,84.433,298.74,0,195.04,0S7.19,84.433,7.19,187.85\n                S91.34,375.7,195.04,375.7c42.217,0,81.033-13.883,112.483-37.4l139.683,139.683c3.4,3.4,7.65,5.1,11.9,5.1s8.783-1.7,11.9-5.1\n                c6.517-6.517,6.517-17.283,0-24.083L332.74,315.35z M41.19,187.85C41.19,103.133,110.04,34,195.04,34\n                c84.717,0,153.85,68.85,153.85,153.85S280.04,341.7,195.04,341.7S41.19,272.567,41.19,187.85z\"/>\n              </g>\n            </g>\n        </svg>\n      </button>\n    </form>\n  )\n}\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Default = () => {\n  return (\n    <div className=\"Default\">\n      <h3>Type your search query above.</h3>\n    </div>\n  );\n}\n\nexport default Default;\n","import React from 'react';\n\nconst Card = () => {\n  return (\n    <div className=\"Card\">\n      <div className=\"book-container\">\n        <h3 className=\"book-title\">Book Title</h3>\n        <div className=\"book-info\">\n          <img className=\"book-img\" src=\"https://via.placeholder.com/150x200\" alt=\"book cover\"/>\n          <div className=\"book-more\">\n            <h4 className=\"book-subtext\">subtext here</h4>\n            <p className=\"book-desc\">\n            Lorem ipsum dolor sit amet, consectetur adipisicing elit. Amet deleniti ea minus non sunt nihil perferendis sed eius eum provident modi, optio tempora asperiores natus reiciendis incidunt cumque, atque repellendus.\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Nav from './comps/nav/Nav';\nimport SearchBox from './comps/searchbox/SearchBox';\nimport Default from './comps/default/Default';\nimport Card from './comps/card/Card';\n\nconst api_key = process.env.GBOOKS_API_KEY;\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      query: '',\n      api_url: 'https://www.googleapis.com/books/v1/volumes?q=',\n      isLoaded: false\n    }\n\n    this.handleSearchChange = this.handleSearchChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState({isLoaded: !this.state.isLoaded})\n  }\n\n// HANDLE SEARCH INPUT VALUE\n  handleSearchChange(event) {\n    this.setState({ query: event.target.value });\n  }\n\n// HANDLE FORM SUBMIT EVENT\n  handleSubmit(event) {\n    event.preventDefault();\n    const { api_url, query } = this.state;\n    const regex = /\\s/g;\n    const parsedQuery = query.replace(regex, \"+\");\n\n    if (event.target.elements.searchfield.value.length > 0) {\n      console.log(`${api_url}${parsedQuery}`);\n      fetch(`${api_url}${query}`)\n        .then(resp => resp.json())\n        .then(json_data => console.table(json_data))\n    }\n  }\n\n// FETCH FROM API\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>BookWorm</h1>\n          <Nav />\n        </header>\n\n        <SearchBox\n          onSearchChange={this.handleSearchChange}\n          onBtnSubmit={this.handleSubmit}\n          query={this.state.query}\n        />\n\n        {this.state.query.length <= 0 ? <Default /> : null}\n\n        <Card />\n        <Card />\n        <Card />\n\n        {/* <footer>\n          <p></p>\n        </footer> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}